import seaborn as sns
import seaborn as sns
import matplotlib.pyplot as plt
from rich.console import Console
from rich.table import Table
import seaborn as sns
import matplotlib.pyplot as plt
from rich.console import Console
from rich.table import Table
console = Console()
table = Table(title = "Movie Dataset Variables", show_lines = True)
table.add_column("Variable Name", style = "cyan", justify = "left")
table.add_column("Description", style = "magenta", justify = "left")
table.add_row('movie_id', 'Unique identifier of the movie.')
table.add_row('title', 'Title of the movie.')
table.add_row('release_year', 'The year the movie was released.')
table.add_row('genre_ids', 'List of genres associated with a movie.')
table.add_row('original_language', 'Original language of the movie.')
table.add_row('cast_names', 'List of actors in the movie.')
table.add_row('watch_providers', 'Streaming platforms where the movie is available.')
table.add_row('rating_average', 'A quantitative assessment of the overall quality of a movie.')
table.add_row('vote_count', 'The total number of people who voted for the movie.')
table.add_row('author', 'Unique identifier for the user.')
table.add_row('user_rating', 'Rating given by user.')
console.print(table)
import warnings
warnings.simplefilter(action ='ignore', category = FutureWarning)
#plotting missing values for movie_content_df
plt.figure(figsize = (18,8))
sns.heatmap(movie_content_df.isnull(), cmap = "Purples")
plt.xlabel('Variables')
plt.ylabel('Column Number')
plt.xticks(rotation = 80)
plt.title('Missing Values for movie_content_df')
plt.subplots_adjust(bottom = 0.25)
plt.show()
#| echo: false
#| results: hide
movie_reviews_df = pd.read_csv('../data/movie_reviews_data.csv')
movie_content_df = pd.read_csv('../data/movie_content_df.csv')
movies_df = pd.read_csv('../data/movies_data.csv')
pd.options.mode.chained_assignment = None
# Creates the dictionary of genre IDs and names
# Load necessary packages
import requests
import pandas as pd
api_key = "d3e8d7fcb94be031986259192b4fdfb0"
# Base URL
url = "https://api.themoviedb.org/3/genre/movie/list"
# Set parameters like the page number and API key
parameters = {
"api_key": api_key,
"page":1
}
# Make the GET request to fetch the data
response = requests.get(url, params=parameters)
# Check if the request was successful
if response.status_code == 200:
genre_data = response.json()  # Convert response to JSON
genres = genre_data["genres"]  # Extract the list of genres
genre_dict = {genre["id"]: genre["name"] for genre in genres}  # Create dictionary
print(genre_dict)  # Print the genre mapping
else:
print("Error", response.status_code)
#| echo: false
#| results: hide
movie_reviews_df = pd.read_csv('../data/movie_reviews_data.csv')
movie_content_df = pd.read_csv('../data/movie_content_df.csv')
movies_df = pd.read_csv('../data/movies_data.csv')
pd.options.mode.chained_assignment = None
# Load necessary packages
import pandas as pd
import ast
def genre_preprocessing(dataframe):
# Convert genre_ids to lists
dataframe['genre_ids'] = dataframe['genre_ids'].apply(ast.literal_eval)
# Map genre_ids to genre names
dataframe['genre_ids'] = dataframe['genre_ids'].apply(lambda x: [genre_dict[genre_id] for genre_id in x])
return dataframe
def content_preprocessing(dataframe):
# Format genre_ids
dataframe = genre_preprocessing(dataframe)
# Select necessary columns
dataframe = dataframe[['movie_id', 'title', 'release_date', 'genre_ids', 'original_language', 'cast_names', 'watch_providers', 'rating_average', 'vote_count']]
return dataframe
# Apply the preprocessing function
movie_content_df = content_preprocessing(movie_content_df)
# Load necessary packages
import pandas as pd
import pycountry # for languages convertion
import pandas as pd
movie_content_df.columns
# Tidying `genre_ids`
def clean_genre_ids(value):
if isinstance(value, list):  # If it's already a list, clean and join
return ', '.join(genre.strip() for genre in value)
elif isinstance(value, str) and value.startswith('c(') and value.endswith(')'):
# Handle string cases formatted like R's "c(...)"
genres = [genre.strip().strip('"') for genre in value[2:-1].split(',')]
return ', '.join(genres)
return value  # Return as is if neither case
# Apply the function to genre_ids column
movie_content_df['genre_ids'] = movie_content_df['genre_ids'].apply(clean_genre_ids)
# Check genre_ids missing and type
movie_content_df['genre_ids'].isna().sum() # No missing data
movie_content_df['genre_ids'].apply(type).value_counts() # All are string type
# Tidying original language to be full word
def convert_language_code(code):
try:
language = pycountry.languages.get(alpha_2=code)
return language.name
except:
return code  # no corresponding language, return original language code
movie_content_df['original_language'] = movie_content_df['original_language'].apply(convert_language_code)
movie_content_df["original_language"] = movie_content_df["original_language"].replace("cn", "Chinese") # cn to Chinese
movie_content_df["original_language"] = movie_content_df["original_language"].replace("xx", "Unknown") # xx to Unknown
# Editing data types
movie_content_df['rating_average'] = pd.to_numeric(movie_content_df['rating_average'], errors='coerce')
movie_content_df['rating_average'] = movie_content_df['rating_average'].round(0).astype(int) # vote_average to round
movie_content_df['vote_count'] = pd.to_numeric(movie_content_df['vote_count'], errors='coerce')
# Creating a `release_year` column
movie_content_df = movie_content_df.copy()  # Ensure movies_df is a separate DataFrame
movie_content_df["release_date"] = movie_content_df["release_date"].astype(str)
movie_content_df = movie_content_df[movie_content_df["release_date"] != '']
movie_content_df["release_year"] = pd.to_numeric(movie_content_df["release_date"].str[:4], errors = "coerce")
movie_content_df = movie_content_df.drop(columns=["release_date"])
# Changing the `title` type
# Convert to pandas' new string type
movie_content_df["title"] = movie_content_df["title"].astype("string")
# Check the dtype again
print(movie_content_df["title"].dtype)
# Editing `cast_names`
movie_content_df["cast_names"] = movie_content_df["cast_names"].replace("", pd.NA)
# Editing `watch_providers`
movie_content_df["watch_providers"] = movie_content_df["watch_providers"].replace("", pd.NA)
# Reordering column names
# Define the new column order
new_column_order = ['movie_id', 'title', 'release_year', 'genre_ids', 'original_language', 'cast_names', 'watch_providers', 'rating_average', 'vote_count']
# Reorganize columns in the DataFrame
movie_content_df = movie_content_df[new_column_order]
import pandas as pd
import ast
def genre_preprocessing(dataframe):
# Convert genre_ids to lists
dataframe['genre_ids'] = dataframe['genre_ids'].apply(ast.literal_eval)
# Map genre_ids to genre names
dataframe['genre_ids'] = dataframe['genre_ids'].apply(lambda x: [genre_dict[genre_id] for genre_id in x])
return dataframe
def collab_preproccesing(dataframe):
# Format genre_ids
dataframe = genre_preprocessing(dataframe)
# Select necessary columns
dataframe = dataframe[['id', 'title', 'release_date', 'genre_ids', 'original_language', 'vote_count']]
return dataframe
# Apply the preprocessing function
movies_df = collab_preproccesing(movies_df)
# Creating a `user_id` column
user_id_map = {}  # Dictionary to store author -> user_id mapping
current_id = 1
# Ensure 'user_id' column exists
movie_reviews_df["user_id"] = pd.NA
# Get valid indices
valid_indices = movie_reviews_df["user_rating"].notna() & (movie_reviews_df["user_rating"] != "")
# Store user IDs in a list to avoid modifying DataFrame during iteration
user_ids = []
for idx, author in movie_reviews_df.loc[valid_indices, "author"].items():
if author not in user_id_map:
user_id_map[author] = current_id
current_id += 1
user_ids.append((idx, user_id_map[author]))
# Assign user IDs to the DataFrame
for idx, user_id in user_ids:
movie_reviews_df.loc[idx, "user_id"] = user_id
# Convert `user_id` to integers (nullable type to allow NaN)
movie_reviews_df["user_id"] = movie_reviews_df["user_id"].astype("Int64")
# Drop the `author` column
movie_reviews_df = movie_reviews_df.drop(columns=["author"])
import seaborn as sns
import matplotlib.pyplot as plt
from rich.console import Console
from rich.table import Table
console = Console()
table = Table(title = "Movie Dataset Variables", show_lines = True)
table.add_column("Variable Name", style = "cyan", justify = "left")
table.add_column("Description", style = "magenta", justify = "left")
table.add_row('movie_id', 'Unique identifier of the movie.')
table.add_row('title', 'Title of the movie.')
table.add_row('release_year', 'The year the movie was released.')
table.add_row('genre_ids', 'List of genres associated with a movie.')
table.add_row('original_language', 'Original language of the movie.')
table.add_row('cast_names', 'List of actors in the movie.')
table.add_row('watch_providers', 'Streaming platforms where the movie is available.')
table.add_row('rating_average', 'A quantitative assessment of the overall quality of a movie.')
table.add_row('vote_count', 'The total number of people who voted for the movie.')
table.add_row('author', 'Unique identifier for the user.')
table.add_row('user_rating', 'Rating given by user.')
console.print(table)
import warnings
warnings.simplefilter(action ='ignore', category = FutureWarning)
#plotting missing values for movie_content_df
plt.figure(figsize = (18,8))
sns.heatmap(movie_content_df.isnull(), cmap = "Purples")
plt.xlabel('Variables')
plt.ylabel('Column Number')
plt.xticks(rotation = 80)
plt.title('Missing Values for movie_content_df')
plt.subplots_adjust(bottom = 0.25)
plt.show()
#plotting missing values for movie_reviews_df
plt.figure(figsize = (18,8))
sns.heatmap(movie_reviews_df.isnull(), cmap = "Purples")
plt.xlabel('Variables')
plt.ylabel('Column Number')
plt.title('Missing Values for movie_reviews_df')
plt.subplots_adjust(bottom = 0.25)
plt.show()
#separating genres and exploding
movie_content_df['genre_ids'] = movie_content_df['genre_ids'].fillna('').astype(str)
movie_content_df['genre_list'] = movie_content_df['genre_ids'].apply(lambda x: [genre.strip() for genre in x.split(',')])
movies_exploded = movie_content_df.explode('genre_list')
#bar chart for genre counts
genre_counts = movies_exploded['genre_list'].value_counts()
plt.figure(figsize = (12, 6))
sns.barplot(x = genre_counts.index[:10], y = genre_counts.values[:10], palette = "coolwarm")
plt.xticks(rotation = 45)
plt.xlabel('Genre')
plt.ylabel('Count')
plt.title('Popular Genres')
plt.subplots_adjust(bottom = .25)
plt.show()
#countplot for languages
plt.figure(figsize = (12, 6))
sns.countplot(y = 'original_language', data = movie_content_df, order = movie_content_df['original_language'].value_counts(ascending = False).index[:5])
plt.xlabel('Count')
plt.ylabel('Language')
plt.title('Top 5 Movie Languages')
plt.subplots_adjust(left = .25)
plt.show()
#separating actors and exploding
movie_content_df['actors_list'] = movie_content_df['cast_names'].str.split(',')
movies_exploded = movie_content_df.explode('actors_list')
#bar chart for actor counts
actors_count = movies_exploded['actors_list'].value_counts().sort_values(ascending = False)
plt.figure(figsize = (12, 6))
sns.barplot(x = actors_count.values[:15], y = actors_count.index[:15], orient = 'h', color = "skyblue")
plt.xlabel('Count')
plt.ylabel('Actor')
plt.title('Common Actors')
plt.yticks(rotation = 0)
plt.subplots_adjust(left = .3)
plt.show()
movie_content_df['providers_list'] = movie_content_df['watch_providers'].str.split(',')
movies_exploded = movie_content_df.explode('providers_list')
# Count the occurrences of each provider
provider_counts = movies_exploded['providers_list'].value_counts()
# Bar chart for the top providers
plt.figure(figsize=(12,6))
sns.barplot(x=provider_counts.values[:15], y=provider_counts.index[:15], color="pink")
plt.xlabel('Number of Movies Available')
plt.ylabel('Provider')
plt.title('Most Available Streaming Providers')
plt.subplots_adjust(left=0.4)
plt.show()
#counting how many times an author reviewed movies
user_review_counts = movie_reviews_df['author'].value_counts()
# Bar chart for top reviewers
plt.figure(figsize=(12,6))
sns.barplot(x=user_review_counts.values[:10], y=user_review_counts.index[:10], color="darkviolet")
plt.xlabel('Number of Reviews')
plt.ylabel('Author')
plt.title('Top 10 Users with Most Reviews')
plt.subplots_adjust(left=0.4)
plt.show()
#| echo: false
#| results: hide
import pandas as pd
file_path = "~/Desktop/Pstat134/Pstat134-Movie-Recommender-System/data_final/movie_contents copy.csv"
movie_content_df = pd.read_csv(file_path)
# Combine relevent features
movie_content_df["combined_features"] = (
movie_content_df["genre_ids"].fillna("").str.replace(",", " ") + " | " +
movie_content_df["cast_names"].fillna("").str.replace(",", " ") + " | " +
movie_content_df["watch_providers"].fillna("").str.replace(",", " ")
)
# TF-IDF Vectorization
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words="english", min_df=2)
tfidf_matrix = tfidf_vectorizer.fit_transform(movie_content_df["combined_features"])
print("TF-IDF Matrix Shape:", tfidf_matrix.shape)
# Compute Cosine Similarity
from sklearn.metrics.pairwise import cosine_similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
print("Cosine Similarity Matrix Shape:", cosine_sim.shape)
print("Sample Cosine Similarity Scores:\n", cosine_sim[:5, :5])
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
import numpy as np
# TF-IDF
movie_content_df["combined_features"] = (
movie_content_df["genre_ids"].fillna("").str.replace(",", " ") + " | " +
movie_content_df["cast_names"].fillna("").str.replace(",", " ") + " | " +
movie_content_df["watch_providers"].fillna("").str.replace(",", " ")
)
tfidf_vectorizer = TfidfVectorizer(stop_words="english", min_df=2)
tfidf_matrix = tfidf_vectorizer.fit_transform(movie_content_df["combined_features"])
# add numeric features(need standardization)
scaler = MinMaxScaler()
numeric_features = movie_content_df[["rating_average", "vote_count"]].fillna(0)
numeric_matrix = scaler.fit_transform(numeric_features)
# integrate TFIDF and numeric features
final_matrix = np.hstack((tfidf_matrix.toarray(), numeric_matrix))
# Linear Kernel similarity
from sklearn.metrics.pairwise import linear_kernel
linear_sim = linear_kernel(final_matrix, final_matrix)
print("Linear Kernel Similarity Matrix Shape:", linear_sim.shape)
print("Sample Linear Kernel Similarity Scores:\n", linear_sim[:5, :5])
from difflib import get_close_matches
def content_based_movie_recs(movie_title, movie_content_df, cosine_sim, top_n=11):
# prepprocess input: remove space and lowercase
clean_title = movie_title.strip().lower()
# preprocess movie title
movie_content_df["clean_title"] = movie_content_df["title"].str.strip().str.lower()
# find the most similar movie
possible_matches = get_close_matches(clean_title, movie_content_df["clean_title"], n=1, cutoff=0.7)
if possible_matches:
clean_title = possible_matches[0]
movie_idx = movie_content_df[movie_content_df["clean_title"] == clean_title].index
if movie_idx.empty:
return f"Movie '{movie_title.strip()}' not found. Please check the title."
movie_idx = movie_idx[0]
similarity_scores = list(enumerate(cosine_sim[movie_idx]))
similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
top_movies = similarity_scores[1:top_n+1]
recommendations = movie_content_df.iloc[[i[0] for i in top_movies]][["title", "genre_ids", "rating_average"]]
print(f"\n🎬 Using matched movie: {movie_content_df.iloc[movie_idx]['title']}")
print(f"\n📌 Top 10 movies similar to '{movie_title.strip()}':")
for i, row in enumerate(recommendations.itertuples(), start=1):
print(f"{i}. {row.title} (Genre: {row.genre_ids}, Rating: {row.rating_average})")
return recommendations
recommendations1 = content_based_movie_recs("The Gorgee", movie_content_df, cosine_sim)
recommendations2 = content_based_movie_recs("Paprika", movie_content_df, cosine_sim)
from difflib import get_close_matches
def content_based_movie_recs_linear(movie_title, movie_content_df, linear_sim, top_n=10):
# prepprocess input: remove space and lowercase
clean_title = movie_title.strip().lower()
# preprocess movie title
movie_content_df["clean_title"] = movie_content_df["title"].str.strip().str.lower()
# find the most similar movie
possible_matches = get_close_matches(clean_title, movie_content_df["clean_title"], n=1, cutoff=0.7)
if possible_matches:
clean_title = possible_matches[0]
else:
return f"Movie '{movie_title.strip()}' not found. Please check the title."
movie_idx = movie_content_df[movie_content_df["clean_title"] == clean_title].index
if movie_idx.empty:
return f"Movie '{movie_title.strip()}' not found. Please check the title."
movie_idx = movie_idx[0]
similarity_scores = list(enumerate(linear_sim[movie_idx]))
similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
# Top 10
top_movies = similarity_scores[1:top_n+1]
recommendations = movie_content_df.iloc[[i[0] for i in top_movies]][["title", "genre_ids", "rating_average"]]
print(f"\n🎬 Using matched movie: {movie_content_df.iloc[movie_idx]['title']}")
print(f"\n📌 Top 10 movies similar to '{movie_title.strip()}':")
for i, row in enumerate(recommendations.itertuples(), start=1):
print(f"{i}. {row.title} (Genre: {row.genre_ids}, Rating: {row.rating_average})")
return recommendations
recommended_movies_linear1 = content_based_movie_recs_linear("The Gorgee", movie_content_df, linear_sim)
recommended_movies_linear2 = content_based_movie_recs_linear("paprika", movie_content_df, linear_sim)
#| echo: false
#| results: hide
movie_reviews_df = pd.read_csv('../data/movie_reviews_data.csv')
movie_content_df = pd.read_csv('../data/movie_content_processed.csv')
movies_df = pd.read_csv('../data/movies_data.csv')
pd.options.mode.chained_assignment = None
# Join the movies and reviews dataframes
movies_merged = pd.merge(movies_df, movie_reviews_df, left_on='id', right_on='movie_id')
# Pivot so that rows are movies, columns are a user, and values are ratings
movies_pivot = movies_merged.pivot_table(index="title",columns="id",values="user_rating").fillna(0)
# Create Compressed Sparse Row (CSR) matrix
movies_matrix = csr_matrix(movies_pivot.values)
# Fit KNN model with cosine similarity as distance metric
knn = NearestNeighbors(metric = "cosine", algorithm = "brute")
knn.fit(movies_matrix)
reticulate::repl_python()
